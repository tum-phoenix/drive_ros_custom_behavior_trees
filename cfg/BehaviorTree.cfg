#!/usr/bin/env python
PACKAGE = "drive_ros_custom_behavior_trees"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#Parameters: name, type, level, description, defalut value, min, max
gen.add("mode", str_t, 0, "The driving mode (OBSTACLES or PARKING)", "DFAULT")
gen.add("tick_freq_ms", int_t, 0, "The minimum duration of one cycle in ms", -1000)
gen.add("general_max_speed", double_t, 0, "The fastest speed the car may drive.", -1000.0)
gen.add("general_max_speed_cautious", double_t, 0, "A maximum speed where more accurate sensing is required / breaking may shorty be needed.", -1000.0)
gen.add("max_bridge_speed", double_t, 0, "Max speed on a bridge", -1000.0)
gen.add("parking_spot_search_speed", double_t, 0, "...", -1000.0)
gen.add("max_lane_switch_speed", double_t, 0, "Speed when changing lanes", -1000.0)
gen.add("sharp_turn_speed", double_t, 0, "Max speed in a sharp turn", -1000.0)
gen.add("very_sharp_turn_speed", double_t, 0, "Max speed in a very sharp turn", -1000.0)
gen.add("overtake_distance", double_t, 0, "Maximum distance to object in front where it is allowed to overtake it.", -1000.0)
gen.add("object_following_break_factor", double_t, 0, "Internal calculation factor for adjusting distance to object in front", -1000.0)
gen.add("universal_break_factor", double_t, 0, "...", -1000.0)
gen.add("barred_area_react_distance", double_t, 0, "When a car starts to pass a barred area", -1000.0)
gen.add("oncoming_traffic_clearance", double_t, 0, "Safety distance to any traffic on the left lane when overtaking", -1000.0)
gen.add("max_start_box_distance", double_t, 0, "Used to determine whether the start box is open", -1000.0)
gen.add("intersection_turn_speed", double_t, 0, "...", -1000.0)
gen.add("break_distance_safety_factor", double_t, 0, "A factor multiplied by the (accurate) calculated break distance", -1000.0)
gen.add("intersection_max_obj_distance", double_t, 0, "Used to determine whether an object at an intersection is to be considered", -1000.0)
gen.add("speed_zero_tolerance", double_t, 0, "Any speed smaller than this is considered to be 0", -1000.0)

#Runtime values
gen.add("overtaking_forbidden_zone", bool_t, 0, "...", False)
gen.add("express_way", bool_t, 0, "...", False)
gen.add("priority_road", bool_t, 0, "...", False)
gen.add("force_stop", bool_t, 0, "Set for stop signs", False)
gen.add("on_bridge", bool_t, 0, "...", False)
gen.add("give_way", bool_t, 0, "...", False)
gen.add("successful_parking_count", int_t, 0, "...", -1000)
gen.add("intersection_turn_indication", int_t, 0, "Turn left/right/don't", -1000)
gen.add("speed_limit", double_t, 0, "...", -1000.0)

exit(gen.generate(PACKAGE, "BehaviorTree", "BehaviorTree"))